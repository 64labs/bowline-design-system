@responsive bp {
  @spacing space {
    .p {
      padding: $space;
    }
    .px {
      padding-left: $space;
      padding-right: $space;
    }
    .py {
      padding-top: $space;
      padding-bottom: $space;
    }
    .pt {
      padding-top: $space;
    }
    .pr {
      padding-right: $space;
    }
    .pb {
      padding-bottom: $space;
    }
    .pl {
      padding-left: $space;
    }

    .m {
      margin: $space;
    }
    .mx {
      margin-left: $space;
      margin-right: $space;
    }
    .my {
      margin-top: $space;
      margin-bottom: $space;
    }
    .mt {
      margin-top: $space;
    }
    .mr {
      margin-right: $space;
    }
    .mb {
      margin-bottom: $space;
    }
    .ml {
      margin-left: $space;
    }

    .size {
      width: $space;
      height: $space;
    }
    .minHeight {
      min-height: $space;
    }
    .height {
      height: $space;
    }
    .maxHeight {
      max-height: $space;
    }
    .minWidth {
      min-width: $space;
    }
    .width {
      width: $space;
    }
    .maxWidth {
      max-width: $space;
    }

    .gap {
      grid-gap: $space;
    }
    .row-gap {
      grid-row-gap: $space;
    }
    .col-gap {
      grid-column-gap: $space;
    }
  }

  @each $v $k in $border {
    @if $k == radius {
      @each $i $j in $v {
        .radius-#{$j} {
          border-radius: $i;
        }
      }
    }

    @if $k == style {
      @each $i $j in $v {
        .border-#{$j} {
          border: $i;
        }
        .border-top-#{$j} {
          border-top: $i;
        }
        .border-right-#{$j} {
          border-right: $i;
        }
        .border-bottom-#{$j} {
          border-bottom: $i;
        }
        .border-left-#{$j} {
          border-left: $i;
        }
      }
    }
  }

  @each $display in (none, inline, block, flex, grid) {
    .display-#{$display} {
      display: $display;
    }
  }

  @each $position in (absolute, relative, fixed, sticky, static) {
    .position-#{$position} {
      position: $position;
    }
  }

  @each $value $label in (0: 0, half: 50%, full: 100%) {
    .top-#{$label} {
      top: $value;
    }
    .right-#{$label} {
      right: $value;
    }
    .bottom-#{$label} {
      bottom: $value;
    }
    .left-#{$label} {
      left: $value;
    }
  }

  @each $alignValue in (flex-start, flex-end, center, baseline, stretch) {
    .flex-alignItems-#{$alignValue} {
      align-items: $alignValue;
    }
    .flex-alignSelf-#{$alignValue} {
      align-self: $alignValue;
    }
  }

  @each $justifyValue
    in (flex-start, flex-end, center, space-around, space-between, stretch)
  {
    .flex-justifyContent-#{$justifyValue} {
      justify-content: $justifyValue;
    }
  }

  @for $k from 1 through 5 {
    .flex-grow-#{$k} {
      flex-grow: $k;
    }
  }

  /* prettier-ignore */
  @each $value $label in (initial: 0 1 auto, 1: 1 1 0%, auto: 1 1 auto, none: none) {
    .flex-#{$label} {
      flex: $value;
    }
  }

  .flex-shrink-0 {
    flex-shrink: 0;
  }

  .flex-shrink-1 {
    flex-shrink: 1;
  }

  .flex-basis-0 {
    flex-basis: 0;
  }

  .flex-basis-auto {
    flex-basis: auto;
  }

  @each $directionValue in (row, row-reverse, column, column-reverse) {
    .flex-direction-#{$directionValue} {
      flex-direction: $directionValue;
    }
  }

  @each $overflowValue in (hidden, visible, auto, scroll) {
    .overflow-#{$overflowValue} {
      overflow: $overflowValue;
    }
    .overflowX-#{$overflowValue} {
      overflow-x: $overflowValue;
    }
    .overflowY-#{$overflowValue} {
      overflow-y: $overflowValue;
    }
  }

  @for $j from 1 through 24 {
    .grid-template-cols-#{$j} {
      grid-template-columns: repeat($j, 1fr);
    }
    .grid-column-#{$j} {
      grid-column: span $j;
    }
  }
}

.flex-wrap {
  flex-wrap: wrap;
}

@each $value $label in $shadows {
  .shadow-#{$label} {
    box-shadow: theme('shadows.$label.style') theme('shadows.$label.color');
  }

  /* prettier-ignore */
  @each $color $tone in $base-colors {
    .shadow-#{$label}-on-#{$tone} {
      box-shadow: theme('shadows.$label.style') isLight($color, theme('shadows.$label.color'), theme('shadows.$label.colorInverted', white));
    }
  }
}

// Stack

@media (max-width: calc(map-get($breakpoints, 1) - 1)px) {
  .display-none + ._stack-item {
    margin-top: 0 !important;
  }
  .display-none + ._stack-divider {
    display: none;
    & + ._stack-item {
      margin-top: 0;
    }
  }
}

@media (min-width: map-get($breakpoints, 1)px) and (max-width: calc(map-get($breakpoints, 2) - 1)px) {
  .display-none\:1 + ._stack-item {
    margin-top: 0 !important;
  }
  .display-none\:1 + ._stack-divider {
    display: none;
    & + ._stack-item {
      margin-top: 0;
    }
  }
}

@media (min-width: map-get($breakpoints, 2)px) {
  .display-none\:2 + ._stack-item {
    margin-top: 0 !important;
  }
  .display-none\:2 + ._stack-divider {
    display: none;
    & + ._stack-item {
      margin-top: 0;
    }
  }
}
