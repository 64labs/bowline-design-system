.text {
  font-family: theme('fontFamily.text');
  font-weight: theme('fontWeights.regular');
}

.heading {
  font-family: theme('fontFamily.heading');
  font-weight: theme('fontWeights.regular');
}

@each $v in (left, center, right) {
  .text-align-#{$v} {
    text-align: $v;
  }
}

@each $v $k in $fontWeights {
  .text-weight-#{$k} {
    font-weight: $v;
  }
}

@each $v in (capitalize, uppercase, lowercase, none, inherit) {
  .text-transform-#{$v} {
    text-transform: $v;
  }
}

@each $v $k in $letterSpacing {
  .kern-#{$k} {
    letter-spacing: $v;
  }
}

@each $mqs $label in $textSizes {
  @each $s $v in $mqs {
    @if $v == default {
      .text-#{$label} {
        $size: map-get($s, size);
        $rows: map-get($s, rows);
        @include textAdjust($size, $rows, text);
      }
    } @else {
      @media (min-width: theme('screens.$v')px) {
        .text-#{$label} {
          $size: map-get($s, size);
          $rows: map-get($s, rows);
          @include textAdjust($size, $rows, text);
        }
      }
    }
  }
}

@each $mqs $label in $headingSizes {
  @each $s $v in $mqs {
    @if $v == default {
      .heading-#{$label} {
        $size: map-get($s, size);
        $rows: map-get($s, rows);
        @include textAdjust($size, $rows, heading);
      }
    } @else {
      @media (min-width: theme('screens.$v')px) {
        .heading-#{$label} {
          $size: map-get($s, size);
          $rows: map-get($s, rows);
          @include textAdjust($size, $rows, heading);
        }
      }
    }
  }
}

/* TODO: figure out better way to handle focus */
.text,
.heading {
  &:focus {
    outline: none;
  }
  &.focus-visible:not(.baseline-crop) {
    border-radius: 3px;
    box-shadow: 0 0 0 3px color(theme('colors.background.focus') a(40%));
  }
}
